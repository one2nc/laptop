#!/bin/sh

# Welcome to the mac script!
# Be prepared to turn your Mac
# into an awesome development machine.

fancy_echo() {
  local fmt="$1"; shift
  # shellcheck disable=SC2059
  printf "\\n$fmt\\n" "$@"
}

append_to_zshrc() {
  local text="$1" zshrc
  local skip_new_line="${2:-0}"

  if [ -w "$HOME/.zshrc.local" ]; then
    zshrc="$HOME/.zshrc.local"
  else
    zshrc="$HOME/.zshrc"
  fi

  if ! grep -Fqs "$text" "$zshrc"; then
    if [ "$skip_new_line" -eq 1 ]; then
      printf "%s\\n" "$text" >> "$zshrc"
    else
      printf "\\n%s\\n" "$text" >> "$zshrc"
    fi
  fi
}

# shellcheck disable=SC2154
trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

# Create .bin directory if it doesn't exist
if [ ! -d "$HOME/.bin/" ]; then
  mkdir "$HOME/.bin"
fi

# Create .zshrc file if it doesn't exist
if [ ! -f "$HOME/.zshrc" ]; then
  touch "$HOME/.zshrc"
fi

# Add .bin to PATH
append_to_zshrc 'export PATH="$HOME/.bin:$PATH"'

# Determine Homebrew prefix based on architecture
arch="$(uname -m)"
if [ "$arch" = "arm64" ]; then
  HOMEBREW_PREFIX="/opt/homebrew"
else
  HOMEBREW_PREFIX="/usr/local"
fi

update_shell() {
  local shell_path
  shell_path="$(command -v zsh)"

  fancy_echo "Changing your shell to zsh ..."
  if ! grep "$shell_path" /etc/shells > /dev/null 2>&1 ; then
    fancy_echo "Adding '$shell_path' to /etc/shells"
    sudo sh -c "echo $shell_path >> /etc/shells"
  fi
  sudo chsh -s "$shell_path" "$USER"
}

# Update shell to zsh if not already set
case "$SHELL" in
  */zsh)
    if [ "$(command -v zsh)" != '/usr/local/bin/zsh' ] ; then
      update_shell
    fi
    ;;
  *)
    update_shell
    ;;
esac

# Install Homebrew if not already installed
if ! command -v brew >/dev/null; then
  fancy_echo "Installing Homebrew ..."
  /bin/bash -c \
    "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

  append_to_zshrc "eval \"\$($HOMEBREW_PREFIX/bin/brew shellenv)\""

  export PATH="$HOMEBREW_PREFIX/bin:$PATH"
fi

# Uninstall old Homebrew-Cask if present
if brew list | grep -Fq brew-cask; then
  fancy_echo "Uninstalling old Homebrew-Cask ..."
  brew uninstall --force brew-cask
fi

# Update Homebrew formulae
fancy_echo "Updating Homebrew formulae ..."
brew update --force # https://github.com/Homebrew/brew/issues/1151

# Show only open app icons in dock
defaults write com.apple.dock static-only -bool true; killall Dock

# Install essential tools and applications
install_brew_package() {
  local package="$1"
  fancy_echo "Installing $package"
  brew install "$package"
}

install_brew_cask() {
  local cask="$1"
  fancy_echo "Installing $cask"
  brew install --cask "$cask"
}

# Unix tools
install_brew_package git
install_brew_package openssl
install_brew_package zsh

# Applications
install_brew_cask alfred
install_brew_cask google-chrome
install_brew_cask firefox
install_brew_cask docker
install_brew_package gh
install_brew_cask google-drive
install_brew_cask intellij-idea-ce
install_brew_cask sublime-text
install_brew_cask visual-studio-code
install_brew_package vim
install_brew_cask iterm2
install_brew_cask lastpass
install_brew_cask libreoffice
install_brew_cask maccy
install_brew_cask macdown
install_brew_cask obsidian
install_brew_cask numi
install_brew_cask notion
install_brew_cask postman
install_brew_cask rectangle
install_brew_cask scroll-reverser
install_brew_cask slack
install_brew_cask tableplus
install_brew_cask whatsapp
install_brew_cask zoom

# Run customizations from ~/.laptop.local if present
if [ -f "$HOME/.laptop.local" ]; then
  fancy_echo "Running your customizations from ~/.laptop.local ..."
  # shellcheck disable=SC1090
  . "$HOME/.laptop.local"
fi

# Set default key repeat rate to some sane values
defaults write -g InitialKeyRepeat -int 25
defaults write -g KeyRepeat -int 2

# Enable three-finger drag
defaults write com.apple.AppleMultitouchTrackpad DragLock -bool false
defaults write com.apple.AppleMultitouchTrackpad Dragging -bool false
defaults write com.apple.AppleMultitouchTrackpad TrackpadThreeFingerDrag -bool true

# find out id of current user
user=`id -un`

# force user to logout for the key repeat rate and three-finger drag to take effect
launchctl bootout user/`id -u $user`
